name: GitHub Actions Demo
run-name: ${{ github.actor }} is testing out GitHub Actions
on: [push]
env:
  branch_name: ${{ github.ref }}
  base_s3_bucket_name: test
  aws_region: ap-northeast-1
jobs:
  Explore-GitHub-Actions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          files: root/**
          separator: ","
      - name: check any file under root folder changed
        if: steps.changed-files.outputs.any_changed != 'true'
        uses: actions/github-script@v6
        with:
          script: |
              core.setFailed('No function file changed.')
      - name: check branch name
        run: |
          import os
          branch_name = os.environ['branch_name']
          env_file = os.getenv('GITHUB_ENV')
          if "dev" in branch_name:
              env = "dev"
          elif "stg" in branch_name:
              env = "stg"
          elif "prd" in branch_name:
              env = "prd"
          else:
              print("Branch name has no env info.")
              os._exit(1)
          with open(env_file, "a") as envfile:
            envfile.write(f"env={env}")
        shell: python
      - name: check changed files
        id: show-changed-files
        run: |
           import os
           env_file = os.getenv('GITHUB_ENV')
           files_str = "${{ steps.changed-files.outputs.all_changed_files }}"
           files_array = files_str.split(",")
           function_list = []
           for i in files_array:
              function_list.append(i.split("/")[1])
           if len(set(function_list)) != 1:
              print("Need only one function changed.")
              os._exit(1)
           with open(env_file, "a") as envfile:
              envfile.write(f"function={function_list[0]}")
        shell: python
      - name: generate terraform init command
        run: echo "terraform init -backend-config='bucket=${{ env.env }}-${{ env.base_s3_bucket_name}}' -backend-config='key=${{ env.env }}/${{ env.function }}.tfstate' -backend-config='region=${{ env.aws_region}}'"
        working-directory: ./root/${{ env.function }}
      - name: generate terraform apply command
        run: echo "terraform apply -var-file ./env/${{ env.env }}.tfvars"
        working-directory: ./root/${{ env.function }}